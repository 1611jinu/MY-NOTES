# = Sharp
! = Bang
#! = Shebang

echo is shell builtin
type echo
type -a echo 
help echo
uptime is not shell buitin
man uptimer  

# This script displays various information to the screen

# Display ‘Hello’
echo ‘Hello’

# Assign a value to a variable
WORD=’script’

#Display that value using the variable
echo “$WORD”

#Demonstrate that single quotes cause variables to Not get expanded
echo ‘$WORD’
# Combine the variable with hard-coded text
echo “This is a shell $WORD”

#Display the contents of the variable using an alternative syntax 
echo “This is a shell ${WORD}”

#Append text to the variable.
echo “${WORD}ing is fun!”

#Show how not to append text to a variable
#This doesn’t work:
echo “$WORDing” is fun!”

#Create a new variable
ENDING=’ed’

#Combine the two variables
echo “This is ${WORD}${ENDING}”

#Change the value stored in the ENDING variable (Reassignment)
ENDING=’ing’
echo “${WORD}${ENDING} is fun!”

echo "========Script made by JinalRaval================="

#!/bin/bash
# Display the UID and username of the user executing this script.
# Display if the user is the root user or not.

# Display the UID
echo "Your UID is ${UID}"
#man bash 

# Display the username
#type -a id
#man id
#id
#id -u
#id -u -n
#id -un
#id -nu
#whoami
#type -a whoami
#man whoami
USER_NAME=$(id -un)
echo "Your username is ${USER_NAME}"

# Display if the user is the root user or not.
if [[ "${UID}" -eq 0 ]]
then
	echo 'You are root.'
else
	echo 'You are not root.'
fi
#type -a if
#help if
#colon is used to interpret new line. You can put all code in one line.
#type -a [[
#type -a test
#help test
#type -a [

echo “========Script made by Jinal Raval===============”

#!/bin/bash
# Display the UID and username of the user executing this script.
# Display if the user is the jinal user or not.

# Display the UID
echo "Your UID is ${UID}"

# Only display if the UID does NOT match 1000
UID_TO_TEST_FOR='1000'
if [[ "${UID}" -ne ${UID_TO_TEST_FOR} ]]
then
	echo "YOUR UID does not match ${UID_TO_TEST_FOR}"
	exit 1
fi
#man useradd
#type -a exit
#help exit
#help test

#Display the username 
USER_NAME=$(id -un)  

#Test if the id command succeeded
if [[ "${?}" -ne 0 ]]
then
	echo 'The id commmand did not execute succesfully'
	exit 1
fi
echo "Your username is ${USER_NAME}"
#id -un
#echo "${?}"
#id -unx
#echo "${?}"

#You can use a string test conditional
UID_TO_TEST_FOR='jinal'
if [[ "${USER_NAME}" = "${UID_TO_TEST_FOR}" ]]
then
	echo "Your username matches ${UID_TO_TEST_FOR}"
fi
#echo "${?}"

#Test for != (not equal) for the string
if [[ "${USER_NAME}" != "${UID_TO_TEST_FOR}" ]]
then
	echo "Your username does not match ${UID_TO_TEST_FOR}"
	exit 1
fi

exit 0
#echo "${?}"

#=============Script made by Jinal Raval========================

#!/bin/bash

# This script creates an account on the local system
# You will be prompted for the account name and password

#Ask for the user name
#type read
#type -a read
#help read
read -p 'Enter the username to create: ' USER_NAME

#Ask for the real name
read -p 'Enter the name of the peron who this account is for: ' COMMENT


#Ask for the password
read -p 'Enter the password to use for the account: ' PASSWORD


#Create the user
#man useradd
#sudo useradd doughstamper
#sudo su -doughstamper
#ps -ef
#cat /etc/login.def
useradd -c "${COMMENT}" -m ${USER_NAME}

#Set the password for the user
#passwd
#man passwd
#echo ${PASSWORD} | passwd --stdin ${USER_NAME}
echo -e "$PASSWORD\n$PASSWORD" | passwd "$USER_NAME"

#Force password change on the first login.
passwd -e ${USER_NAME}

#==============Script made by Jinal Raval======================================

#!/bin/bash
#
#This script creates a new user on the local system.
# You will be prompted to enter the username (login), thr person name, and a password.
#The username, password, and host for the accout will be displayed.

#Make sure the script is being executed with superuser privileges
if [[ "${UID}" -ne 0 ]]
then
	echo 'Please run with sudo or as root'
	exit 1
fi

#Get the username (login)
read -p 'Enter the username to create: ' USER_NAME

#Get the real name (contents for description field)
read -p 'Enter the name of the person ot application that will be using this account: ' COMMENT

#Get the password
read -p 'Enter the password to use for the account: ' PASSWORD

#Create the account
useradd -c "${COMMENT}" -m ${USER_NAME}

#Check to see if the useradd command succeeded
#We dont want to tell user that an account was created when it hasn't been
if [[ "${?}" -ne 0 ]]
then
	echo 'The account could not be created'
	exit 1
fi

#Set the password
#echo ${PASSWORD} | passwd --stdin ${USER_NAME}
echo -e "$PASSWORD\n$PASSWORD" | passwd "$USER_NAME"
if [[ "${?}" -ne 0 ]]
then
	echo 'The password for account could not be set'
	exit 1
fi

#Force password change on first login
passwd -e ${USER_NAME}

#Display the username,password,and the host where user was created.
echo
echo 'username:'
echo "${USER_NAME}"
echo
echo 'password:'
echo "${PASSWORD}"
echo
echo 'host:'
#man bash 
#echo ${HOSTNAME}
echo "${HOSTNAME}"
exit 0

#================A script made by Jinal Raval============================

#!/bin/bash

#This script generates a list of random passwords

#A random number as a password
PASSWORD="${RANDOM}"
echo "${RANDOM}"

#Three random numbers together
PASSWORD="${RANDOM}${RANDOM}${RANDOM}"
echo "${PASSWORD}"

#Use the current date/time as the basis of the password
PASSWORD=$(date +%s)
echo "${PASSWORD}"

#Use nanoseconds to act as randomization
PASSWORD=$(date +%s%N)
echo "${PASSWORD}"

#A better password
PASSWORD=$(date +%s%N | sha256sum | head -c32)
echo "${PASSWORD}"

#An even a better password
PASSWORD=$(date +%s%N${RANDOM}${RANDOM} | sha256sum | head -c48)
echo "${PASSWORD}"

#Append special character to the password
SPECIAL_CHARACTER=$(echo '!@#$%^&*()_-+=' | fold -w1 | shuf | head -c1)
echo "${PASSWORD}${SPECIAL_CHARACTER}"

#===================Script made by Jinal Raval================================

#!/bin/bash

#This script generates a random passwordfor each user specified on the command line.

#Display what the user typed on the command line
echo "You executed this command: ${0}"
#man bash
#echo ${PATH}
#which head
#man basename
#man dirname

#Display the path and filename of the script
echo "You used $(dirname ${0}) as the path to the $(basename ${0}) script)"
#man bash

#Tell them how many arguments they passed in
#(Inside the script they are parameters, outside they are arguments)
NUMBER_OF_PARAMETERS="${#}"
echo "You supplied ${NUMBER_OF_PARAMETERS} arguments(s) on the command line"

#Make sure that they at least supply one argument.
if [[ "${NUMBER_OF_PARAMETERS}" -lt 1 ]]
then
	echo "Usage: ${0} USER_NAME [USER_NAME]..."
	exit 1
fi
#type -a for
#help for

#Generate and display a password for each parameter
for USER_NAME in "${@}"
do
	PASSWORD=$(date +%s%N | sha256sum | head -c48)
	echo "${USER_NAME}: ${PASSWORD}"
done 

echo===========Script made by Jinal Raval=================================

#!/bin/bash

#Demonstrate the use of shift and while loops

#Display the first three parameters
echo "parameters 1: ${1}"
echo "parameters 2: ${2}"
echo "parameters 3: ${3}"

#Loop through all the positional parameters
while [[ "${#}" -gt 0 ]]
do
	echo "Number of parameters: ${#}"
	echo "parameters 1: ${1}"
        echo "parameters 2: ${2}"
        echo "parameters 3: ${3}"
        echo
        shift
done

#==============A script made by Jinal Raval=======================================

#!/bin/bash

#This script creates a new user on the local system
#You must supply a username as an argument to the script
#Optionally, you also provide a comment for the account as an argument
#A password will be automatically generated for the account
#The username, password, and host for the account will be displayed

#Make sure the script is being executed with superuser privileges
if [[ "${UID}" -ne 0 ]]
then
	echo 'Please run with sudo or as root'
	exit 1
fi

#If they dont supply at least one argument, then give them help
if [[ "${#}" -lt 1 ]]
then
	echo "Usage: ${0} USER_NAME [COMMENT]..."
	echo 'Create an account on the local system with the name of USER_NAME and a comments field of COMMENT'
	exit 1
fi

#The first parameter is the user name
USER_NAME="${1}"

#The rest of the parameters are for the account comments
shift
COMMENT="${@}"

#Generate a password
PASSWORD=$(date +%s%N | sha256sum | head -c48)

#Create the user with the password
useradd -c "${COMMENT}" -m ${USER_NAME}

#Check to see if the useradd command is succeded
#We dont want to tell the user that an account was created when it hasnt been
if [[ "${?}" -ne 0 ]]
then
	echo "The account could not be created"
	exit 1
fi

#Set the password
echo -e "$PASSWORD\n$PASSWORD" | passwd "$USER_NAME"

#Check to see if the passwd command succeeded
if [[ "${?}" -ne 0 ]]
then
	echo "The password for the account could not be set"
	exit 1
fi

#Force password change on first login
passwd -e ${USER_NAME}

#Display the username,password,and the host where user was created.
echo
echo 'username:'
echo "${USER_NAME}"
echo
echo 'password:'
echo "${PASSWORD}"
echo
echo 'host:'
#man bash 
#echo ${HOSTNAME}
echo "${HOSTNAME}"
exit 0 

echo===========Script made by Jinal Raval=================

#!/bin/bash

#This script demonstrates I/O redirection

#Redirect STDOUT to a file
FILE="/tmp/data"
head -n1 /etc/passwd > ${FILE}
#cat /tmp/data
#head -n1 /etc/data

#Redirect STDIN to a program
read LINE < ${FILE}
echo "LINE contains: ${LINE}"

#Redirect STDOUT to a file, overwriting the file
head -n3 /etc/passwd > ${FILE}
echo
echo "Contents of ${FILE}:"
cat ${FILE}

#Redirect STDOUT to a file, appending to the file
echo "${RANDOM} ${RANDOM}" >> ${FILE}
echo "${RANDOM} ${RANDOM}" >> ${FILE}
echo
echo "Contents of ${FILE}:"
cat ${FILE}







